stages:
  - build
  - deploy

# global variables
variables: &global-variables
  IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
  GIT_STRATEGY: clone

.before_build_esp8266_series: &before_build_esp8266_series
  - cd components/at/private_include
  - rm -f at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_AT_EN18031\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02 \"$AT_OTA_TOKEN_WROOM_02_AT_EN18031\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_S2 \"$AT_OTA_TOKEN_WROOM_S2_1024_1024\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_5V2L \"$AT_OTA_TOKEN_WROOM_5V2L\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_ESP8266_1MB \"$AT_OTA_TOKEN_ESP8266_1MB\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_AT_EN18031\"" >> at_ota_token.h
  - echo -e "#define CONFIG_ESP_AT_OTA_SSL_TOKEN_WROOM_02_N \"$AT_OTA_TOKEN_WROOM_02_AT_EN18031\"" >> at_ota_token.h
  - cd -
  # (the same regular expressions are used to set these are used in 'only:' sections below
  - source ./esp-idf/tools/ci/configure_ci_environment.sh
  - ./esp-idf/tools/idf_tools.py --non-interactive install && eval "$(./esp-idf/tools/idf_tools.py --non-interactive export)" || exit 1
  # fetch the submodules (& if necessary re-fetch repo) from gitlab
  # - time ./esp-idf/tools/ci/get-full-sources.sh

esp8266_wroom_02_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build

  variables:
    <<: *global-variables
    
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

esp8266_wroom_02_fm25q16a_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build
  variables:
    <<: *global-variables
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # apply FM25Q16A flash patch
    - echo -e "CONFIG_ENABLE_SPI_FLASH_PATCH=y" >> module_config/module_esp8266_default/sdkconfig.defaults
    - echo -e "CONFIG_ENABLE_FM25Q16A_PATCH_0=y" >> module_config/module_esp8266_default/sdkconfig.defaults
    - echo -e "CONFIG_AT_PROTECT_FIRST_32KB_FLASH=y" >> module_config/module_esp8266_default/sdkconfig.defaults
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

esp8266_wroom_02_th25q16hb_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build
  variables:
    <<: *global-variables
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # apply TH25Q16HB flash patch
    - echo -e "CONFIG_ENABLE_SPI_FLASH_PATCH=y" >> module_config/module_esp8266_default/sdkconfig.defaults
    - echo -e "CONFIG_ENABLE_TH25Q16HB_PATCH_0=y" >> module_config/module_esp8266_default/sdkconfig.defaults
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02\", \"description\": \"TX:15 RX:13\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

esp8266_1MB_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build

  variables:
    <<: *global-variables
    
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"ESP8266_1MB\", \"description\": \"\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"ESP8266_1MB\", \"description\": \"\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

esp8266_wroom_5V2L_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build

  variables:
    <<: *global-variables
    
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-5V2L\", \"description\": \"\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-5V2L\", \"description\": \"\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

esp8266_wroom_02_N_at:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build

  variables:
    <<: *global-variables
    
  artifacts:
    paths:
      - sdkconfig
      - build/*.bin
      - build/*.elf
      - build/*.map
      - build/bootloader/*.bin
      - build/partition_table/*.bin
      - build/customized_partitions/*.bin
      - build/flasher_args.json
      - build/download.config
      - build/factory/*
    expire_in: 6 mos

  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  script:
    # replace submodule esp-idf to internal repository to speedup cloning
    - sed -i 's?"https://github.com"?"${GITLAB_SSH_SERVER}/sdk"?g' module_config/module_esp8266_default/IDF_VERSION
    - mkdir build
    # create module info
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02-N\", \"description\": \"TX:1 RX:3\", \"silence\": 0}" > build/module_info.json'
    - ./build.py reconfigure || echo "skip exception"
    - rm -rf build && mkdir build
    - 'echo -e "{\"platform\": \"PLATFORM_ESP8266\", \"module\": \"WROOM-02-N\", \"description\": \"TX:1 RX:3\", \"silence\": 0}" > build/module_info.json'
    - *before_build_esp8266_series
    - ./build.py build

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v.*$/
  tags:
    - deploy
  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp32-at.git
    # - git push --follow-tags github HEAD:master
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)

build_docs:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp-idf-doc-env:v7
  tags:
    - build_docs
  artifacts:
    when: always
    paths:
      # English version of documentation
      - docs/en/doxygen-warning-log.txt
      - docs/en/sphinx-warning-log.txt
      - docs/en/sphinx-warning-log-sanitized.txt
      - docs/en/_build/html
      # Chinese version of documentation
      - docs/zh_CN/doxygen-warning-log.txt
      - docs/zh_CN/sphinx-warning-log.txt
      - docs/zh_CN/sphinx-warning-log-sanitized.txt
      - docs/zh_CN/_build/html
    expire_in: 1 mos
  script:
    - source /opt/pyenv/activate && pyenv global 3.6.10
    - /opt/pyenv/pyenv-1.2.16/versions/3.6.10/bin/python -m pip install --user -r docs/requirements.txt
    - cd docs
    - ./check_lang_folder_sync.sh
    - cd en
    # - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh
    - cd ../zh_CN
    # - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh
